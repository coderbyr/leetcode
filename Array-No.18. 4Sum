题意：给定数组S，找出其中的四个元素使得其和等于给定的target值；

主要思路：首先对原始数组进行排序，然后设置双指针，分别从头和尾进行逼近；需要注意的是，为尽可能的减小时间复杂度，可以对不同的情况进行列举，从而加快速度；复杂度最优为O(n^3);

c++： 通过对不可能的情况使用continue和break操作，大大加加快了程序的运行速度；
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> Res;

        int n = nums.size();
        if (n < 4) return Res;

        sort(nums.begin(), nums.end());

        for (int i = 0; i < n - 3; i++){
            if (i > 0 && nums[i] == nums[i-1]) continue;
            if (nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
            if (nums[i] + nums[n-1] + nums[n-2] + nums[n-3] < target) continue;

            for (int j = i + 1; j < n - 2; j++){
                if (j > i+1 && nums[j] == nums[j-1]) continue;
                if (nums[i] + nums[j] + nums[j+1] + nums[j+2] > target) break;
                if (nums[i] + nums[j] + nums[n-1] + nums[n-2] < target) continue;

                int left = j + 1, right = n - 1;

                while (left < right){
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum < target) left++;
                    else if (sum > target) right--;
                    else{
                        Res.push_back(vector<int>{nums[i], nums[j], nums[left], nums[right]});
                         do{left++;}while(nums[left]==nums[left-1]&&left<right);
                         do{right--;}while(nums[right]==nums[right+1]&&left<right);
                    }
                }
            }
        }
        return Res;


    }
};

