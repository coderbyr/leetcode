//最长的回文子字符串

string longestPalindrome(string s){
	int size = s.length();
	if (size == 0) return "";
	if (size == 1) return s;

	int minS = 0, maxL = 0;
	for (int i = 0; i < size; i++){
		int k = i, j = i;
		while (k < size-1 && s[k+1] == s[k]) k++;
		i = k+1;
		while (k < size && j > 0 && s[k+1] == s[j-1]){
			k++;
			j--;
		}
		int tmpL = k - j + 1;
		if (tmpL > maxL){
			maxL = tmpL;
			minS = j;
		}
	}
	return s.substr(minS, maxL);
}

//字符串折线遍历
string convert(string s, int numRows){
	int size = s.length();
	if (numRows == 1) return s;
	int step1, step2;
	string res = "";

	for (int i = 0; i < numRows; i++){
		step1 = (numRows - i - 1)*2;
		step2 = i*2;
		int pos = i;

		if (pos < size) res += s.at(pos);
		while (1){
			pos += step1;
			if (pos >= size) break;
			if (step1) res += s.at(pos);
			pos += step2;
			if (pos >= size) break;
			if (step2) res += s.at(pos);
		}
	}
	return res;
}
